"let g:pathogen_disabled = ['AutoClose', 'ctrlp.vim', 'git-blame.vim', 'gundo.vim', 'indentLine', 'nerdcommenter', 'nerdtree-git-plugin', 'papercolor-theme', 'python-syntax', 'syntastic', 'vim-airline', 'vim-gitgutter', 'vim-monokai-tasty', 'vim-multiple-cursors', 'vim-python-pep8-indent', 'vim-sensible', 'vim-surround', 'YouCompleteMe']

" Plugin related

execute pathogen#infect()

filetype plugin on
set encoding=utf-8

"Autoclose-related bugfix
if &term[:4] == "xterm" || &term[:5] == 'screen' || &term[:3] == 'rxvt'
  inoremap <silent> <C-[>OC <RIGHT>
endif


" Syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_javascript_checkers = ['eslint']
let g:syntastic_python_checkers = ['flake8']
let g:syntastic_rst_checkers = ['Sphinx']

map <C-l> <ESC>:call SyntasticToggle()<CR>
let g:syntastic_is_open = 0  
function! SyntasticToggle()
if g:syntastic_is_open == 1
    lclose
    let g:syntastic_is_open = 0 
else
    Errors
    let g:syntastic_is_open = 1 
endif
endfunction

" python-syntax
let python_version_3 = 1
let python_highlight_all = 1

" indentLine
let g:indentLine_conceallevel = 1
let g:indentLine_concealcursor = "inc"
let g:indentLine_char = '┊'
let g:indentLine_setConceal = 1

" ctrlp
let g:ctrlp_custom_ignore = '\v[\/](__pycache__|node_modules|target|dist|build)|(\.(swp|ico|git|svn))$'
nnoremap <C-P> :CtrlPCurWD<CR>

" nerdtree
"syntax on
"filetype plugin indent on
map <C-s> :NERDTreeToggle <bar> NERDTreeMirror<CR>
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
autocmd BufEnter NERD_tree* :let indentLine_enabled = 0
let NERDTreeShowHidden = 1
let NERDTreeMouseMode = 2

" vim-devicons
let g:WebDevIconsNerdTreeGitPluginForceVAlign = 1
let g:WebDevIconsUnicodeDecorateFolderNodes = 1
let g:WebDevIconsNerdTreeBeforeGlyphPadding = ''
let g:DevIconsEnableFoldersOpenClose = 1

"nerdtree git colors
let g:WebDevIconsUnicodeDecorateFolderNodes = 1
let g:NERDTreeGitStatusNodeColorization = 1
let g:NERDTreeGitStatusWithFlags = 1

let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "⋆",            
    \ "Staged"    : "•",            
    \ "Untracked" : "∘",            
    \ "Dirty"     : "⁖",            
    \ "Clean"     : "✔︎",                   
    \ }

let g:NERDTreeColorMapCustom = {
    \ "Modified"  : "#528AB3",  
    \ "Staged"    : "#538B54",  
    \ "Untracked" : "#BE5849",  
    \ "Dirty"     : "#299999",  
    \ "Clean"     : "#87939A"   
    \ } 

" nerdcommenter
let NERDDefaultAlign='left'

"gundo
let g:gundo_prefer_python3 = 1
nnoremap <F5> :GundoToggle<CR>

" vim-airline
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_buffers = 0
let g:airline#extensions#tabline#show_splits = 1

" vim-python-pep8-indent
let g:python_pep8_indent_hang_closing = 1

"custom insert keymappings
inoremap <expr> <TAB> pumvisible() ? "\<C-y>" : "\<CR>"
inoremap <expr> <Esc> pumvisible() ? "\<C-e>" : "\<Esc>"
inoremap <expr> <C-j> pumvisible() ? "\<C-n>" : "\<Down>"
inoremap <expr> <C-k> pumvisible() ? "\<C-p>" : "\<Up>"

"gitgutter keymappings
map ghn :GitGutterNextHunk<CR>
map ghN :GitGutterPrevHunk<CR>
map ghs :GitGutterStageHunk<CR>
map ghu :GitGutterUndoHunk<CR>
map ghp :GitGutterPreviewHunk<CR>

"gitblame mappings
nnoremap gb :<C-u>call gitblame#echo()<CR>

function DarkTheme()
    "colorscheme sublimemonokai
    colorscheme vim-monokai-tasty
endfunction

function LightTheme()
    colorscheme shirotelin
endfunction

call DarkTheme()
set colorcolumn=80

set matchpairs=(:),{:},[:],<:>
set number
set foldcolumn=3
set updatetime=100
set foldmethod=indent
set expandtab
set shiftwidth=4
set cursorline
set statusline=_%f
set title
set mouse=a
set ttymouse=sgr
set modifiable
set undoreload=0

set directory^=$HOME/.vim/tmp//

set spelllang=en,hr
set clipboard=unnamed


autocmd BufWrite AirlineRefresh
autocmd BufNewFile,BufRead *.py set keywordprg=python\ -m\ pydoc
